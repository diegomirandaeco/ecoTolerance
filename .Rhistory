legend.key.size = unit(0.5, "cm")
)
# ──────────────────────────────────────────────────────────────
# 3a. Densidade do HTI (proximidade de rodovia)
ggplot(dados_nogeo, aes(x = HTI_value)) +
geom_density(fill = "steelblue", alpha = 0.35) +
geom_vline(xintercept = indice_ht, colour = "red",
linetype = "dashed", size = 1) +
labs(title = paste("Road Tolerance Index -", especie_alvo),
x = "Individual Road Tolerance Index",
y = "Density") +
theme_light()+
theme(    plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# ──────────────────────────────────────────────────────────────
# 3a. Densidade do HTI (proximidade de rodovia)
ggplot(dados_nogeo, aes(x = HTI_value)) +
geom_density(fill = "steelblue", alpha = 0.35) +
geom_vline(xintercept = indice_ht, colour = "red",
linetype = "dashed", size = 1) +
labs(title = paste("Road Tolerance Index -", especie_alvo),
x = "Individual Road Tolerance Index",
y = "Density") +
theme_classic()+
theme(    plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# 2. Load sample occurrence data (separate by ","; columns: species, longitude, latitude)
occ_data <- read.csv("I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/valid_data_copaifera.csv")
# 3. Compute tolerance indices (including data cleaning and extraction)
result <- compute_indices(
data = occ_data,
remove_duplicates = TRUE,
buffer_km = 1,
ref_dist = 1.5,   ##3.5 anfíbios - 1.5 para plantas - 10 default
divisor = 50
)
# 4. Inspect results
print(result$HTI)          # Median HTI per species
print(result$HFTI)         # Median HFTI per species
plot(result$processed_data["HTI_value"])
plot(result$processed_data["HFTI_value"])
###################
# Importing study area shapefile
brasil_shapefile <- st_read("I:/Meu Drive/Doutorado/Shapefiles/Brasil/lim_pais_a.shp")
especie_alvo <- "Copaifera lagsdorffii_CERRADO_"
dados_especie <- result$processed_data %>%           # lista → tibble sf
filter(species == especie_alvo)                    # mantém só a espécie
# 5. Plot map with occurrence points and Brazil shapefile
ggplot() +
geom_sf(data = brasil_shapefile, fill = "gray90", color = "gray50") +  # Shapefile do Brasil
geom_sf(data = dados_especie, aes(color = HFTI_value)) +       # Dados de ocorrência
scale_color_distiller(palette = "RdYlBu", direction = -1, name = "Normalized HFI") +                          # Escala de cores
theme_minimal() +
ggtitle("Human Footprint Tolerance Index - *Leopardus tigrinus*") +
theme(
plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# 4. Inspect results
print(result$HTI)          # Median HTI per species
especie_alvo <- "Copaifera langsdorffii_CERRADO_"
dados_especie <- result$processed_data %>%           # lista → tibble sf
filter(species == especie_alvo)                    # mantém só a espécie
# 5. Plot map with occurrence points and Brazil shapefile
ggplot() +
geom_sf(data = brasil_shapefile, fill = "gray90", color = "gray50") +  # Shapefile do Brasil
geom_sf(data = dados_especie, aes(color = HFTI_value)) +       # Dados de ocorrência
scale_color_distiller(palette = "RdYlBu", direction = -1, name = "Normalized HFI") +                          # Escala de cores
theme_minimal() +
ggtitle("Human Footprint Tolerance Index - *Leopardus tigrinus*") +
theme(
plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
ggplot() +
geom_sf(data = brasil_shapefile, fill = "gray90", color = "gray50") +  # Shapefile do Brasil
geom_sf(data = dados_especie, aes(color = HTI_value)) +       # Dados de ocorrência
scale_color_distiller(palette = "RdYlBu", direction = -1, name = "Individual RT") +                          # Escala de cores
theme_minimal() +
ggtitle("Road Tolerance Index - *Leopardus tigrinus*") +
theme(
plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# ──────────────────────────────────────────────────────────────
# 1. Remover geometria (sf → tibble “normal”)
dados_nogeo <- st_drop_geometry(dados_especie)
# 2. Definir o índice-resumo que ficará na linha vertical
#    Aqui uso a MEDIANA dos valores individuais; você pode trocar por mean()
indice_ht  <- median(dados_nogeo$HTI_value,  na.rm = TRUE)
indice_hft <- median(dados_nogeo$HFTI_value, na.rm = TRUE)
# ──────────────────────────────────────────────────────────────
# 3a. Densidade do HTI (proximidade de rodovia)
ggplot(dados_nogeo, aes(x = HTI_value)) +
geom_density(fill = "steelblue", alpha = 0.35) +
geom_vline(xintercept = indice_ht, colour = "red",
linetype = "dashed", size = 1) +
labs(title = paste("Road Tolerance Index -", especie_alvo),
x = "Individual Road Tolerance Index",
y = "Density") +
theme_classic()+
theme(    plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# ──────────────────────────────────────────────────────────────
# 3b. Densidade do HFTI (pegada humana modificada)
ggplot(dados_nogeo, aes(x = HFTI_value)) +
geom_density(fill = "steelblue", alpha = 0.35) +
geom_vline(xintercept = indice_hft, colour = "red",
linetype = "dashed", size = 1) +
labs(title = paste("Human Footprint Tolerance Index -", especie_alvo),
x = "Normalized Human Footprint Tolerance",
y = "Density") +
theme_classic()+
theme(    plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
# 5. Plot map with occurrence points and Brazil shapefile
ggplot() +
geom_sf(data = brasil_shapefile, fill = "gray90", color = "gray50") +  # Shapefile do Brasil
geom_sf(data = dados_especie, aes(color = HFTI_value)) +       # Dados de ocorrência
scale_color_distiller(palette = "RdYlBu", direction = -1, name = "Normalized HFI") +                          # Escala de cores
theme_minimal() +
ggtitle("Human Footprint Tolerance Index - *Leopardus tigrinus*") +
theme(
plot.title      = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title      = element_text(size = 16),   # ambos eixos
axis.text       = element_text(size = 14),
legend.title    = element_text(size = 16, face = "bold"),
legend.text     = element_text(size = 13),
legend.key.size = unit(0.5, "cm")
)
converter_cs_para_txt_caminho_fixo <- function(pasta_entrada, pasta_saida) {
# 1. Verificar se a pasta de entrada existe
if (!dir.exists(pasta_entrada)) {
stop("A pasta de entrada especificada não existe: ", pasta_entrada)
}
# 2. Criar a pasta de saída se ela não existir
if (!dir.exists(pasta_saida)) {
tryCatch({
dir.create(pasta_saida, recursive = TRUE)
cat("Pasta de saída criada em:", pasta_saida, "\n")
}, error = function(e) {
stop("Erro ao tentar criar a pasta de saída '", pasta_saida, "': ", e$message)
})
}
# 3. Listar todos os arquivos .cs na pasta de entrada
# Adicionando 'recursive = FALSE' para não buscar em subpastas, a menos que seja desejado.
# Se precisar buscar em subpastas, mude para 'recursive = TRUE'.
arquivos_cs <- list.files(pasta_entrada, pattern = "\\.cs$", full.names = TRUE, ignore.case = TRUE, recursive = FALSE)
if (length(arquivos_cs) == 0) {
cat("Nenhum arquivo .cs encontrado em:", pasta_entrada, "\n")
return(invisible(NULL)) # Retorna NULL invisivelmente se não houver arquivos
}
cat("Arquivos .cs encontrados:", length(arquivos_cs), "\n")
# 4. Ler e converter cada arquivo
arquivos_convertidos <- 0
erros_conversao <- 0
for (arquivo_cs_caminho in arquivos_cs) {
tryCatch({
# Obter o nome base do arquivo (sem a extensão)
nome_base <- tools::file_path_sans_ext(basename(arquivo_cs_caminho))
# Construir o caminho do novo arquivo .txt
arquivo_txt_caminho <- file.path(pasta_saida, paste0(nome_base, ".txt"))
# Ler o conteúdo do arquivo .cs
# Tentar ler como UTF-8 primeiro, que é comum para arquivos .cs
# Se falhar, tentar ler como texto simples (locale-specific)
conteudo_cs <- tryCatch({
readLines(arquivo_cs_caminho, encoding = "UTF-8", warn = FALSE)
}, warning = function(w) {
# Se houver um aviso com UTF-8 (pode ser sobre EOL incompleto, mas ainda lê)
# Tentar ler de novo sem encoding específico se a leitura falhar ou for problemática
# cat("Aviso ao ler", basename(arquivo_cs_caminho), "com UTF-8:", w$message, "\n")
# readLines(arquivo_cs_caminho, warn = FALSE) # Tenta com encoding padrão do sistema
readLines(arquivo_cs_caminho, encoding = "UTF-8", warn = FALSE) # Mantém UTF-8, pois o aviso pode não ser fatal
}, error = function(e_read) {
cat("Erro ao ler o arquivo", basename(arquivo_cs_caminho), "com UTF-8, tentando encoding padrão:", e_read$message, "\n")
readLines(arquivo_cs_caminho, warn = FALSE) # Tenta com encoding padrão do sistema
})
# Escrever o conteúdo no arquivo .txt
# Usar 'useBytes = FALSE' e especificar encoding = "UTF-8" é geralmente mais seguro para texto
# se você sabe que o conteúdo é texto e quer garantir UTF-8 na saída.
# Se 'useBytes = TRUE' foi usado anteriormente e funcionou, pode ser mantido.
# writeLines(conteudo_cs, arquivo_txt_caminho, useBytes = TRUE)
con_saida <- file(arquivo_txt_caminho, open = "wt", encoding = "UTF-8")
writeLines(conteudo_cs, con_saida, useBytes = FALSE) # useBytes = FALSE quando encoding é especificado
close(con_saida)
cat("Convertido:", basename(arquivo_cs_caminho), "->", basename(arquivo_txt_caminho), "\n")
arquivos_convertidos <- arquivos_convertidos + 1
}, error = function(e) {
cat("ERRO ao converter o arquivo", basename(arquivo_cs_caminho), ":", e$message, "\n")
erros_conversao <- erros_conversao + 1
})
}
cat("\n--- Relatório da Conversão ---\n")
cat("Pasta de entrada:", pasta_entrada, "\n")
cat("Pasta de saída:", pasta_saida, "\n")
cat(arquivos_convertidos, "arquivos convertidos com sucesso.\n")
if (erros_conversao > 0) {
cat(erros_conversao, "arquivos falharam na conversão.\n")
} else {
cat("Nenhum erro durante a conversão.\n")
}
cat("Conversão concluída!\n")
}
# --- CONFIGURAÇÃO ---
# Defina os caminhos das pastas aqui
# ATENÇÃO: No R, é recomendável usar barras normais "/" ou barras invertidas duplas "\\\\" para caminhos de arquivo.
pasta_dos_scripts_cs <- "F:/StreamingRace/Streaming Race/Assets/Scripts"
pasta_para_salvar_txt <- "F:/StreamingRace/scriptstxt"
# --- EXECUÇÃO ---
# Chamar a função com os caminhos especificados
# Certifique-se de que os caminhos acima estão corretos antes de executar.
converter_cs_para_txt_caminho_fixo(pasta_dos_scripts_cs, pasta_para_salvar_txt)
# --- CONFIGURAÇÃO ---
# Defina os caminhos das pastas aqui
# ATENÇÃO: No R, é recomendável usar barras normais "/" ou barras invertidas duplas "\\\\" para caminhos de arquivo.
pasta_dos_scripts_cs <- "F:/StreamingRace/Streaming Race/Assets/Scripts/critics"
pasta_para_salvar_txt <- "F:/StreamingRace/scriptstxt"
# --- EXECUÇÃO ---
# Chamar a função com os caminhos especificados
# Certifique-se de que os caminhos acima estão corretos antes de executar.
converter_cs_para_txt_caminho_fixo(pasta_dos_scripts_cs, pasta_para_salvar_txt)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Se necessário, instale o devtools
install.packages("devtools")
install.packages("devtools")
# Instale/reinstale seu pacote (supondo que o diretório seja o atual)
devtools::document()   # Gera documentação e NAMESPACE
devtools::install()    # Instala o pacote no R local
library(ecoTolerance)
library(sf)       # Para ler shapefile
library(ggplot2)  # As funções internas do pacote já importam ggplot2, mas é bom ter disponível
occ_data <- read.csv("I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/valid_data_copaifera.csv")
result <- compute_indices(
data = occ_data,
remove_duplicates = TRUE,
buffer_km = 1,   # 1 km para filtrar pontos próximos
ref_dist = 1.5,  # Ex.: plantas (pode variar)
divisor = 50     # Divisor para HFTI (conforme escala do raster)
)
# Verifique rapidamente:
head(result$RTI)    # Data frame com RTI mediano por espécie
head(result$HFTI)   # Data frame com HFTI mediano por espécie
brasil_shapefile <- "I:/Meu Drive/Doutorado/Shapefiles/Brasil/lim_pais_a.shp"
# Certifique-se de que o caminho está correto e de que todos os arquivos do shapefile (.shp, .dbf, .shx, .prj) estão na mesma pasta.
pasta_saida <- "I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/testes_saída"
generate_all_reports(
result = result,
area_shapefile = brasil_shapefile,
out_dir = pasta_saida
)
library(ecoTolerance)
occ_data <- read.csv("I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/valid_data_copaifera.csv")
processed_data <- process_occurrences(
data = occ_data,
remove_duplicates = TRUE,
buffer_km = 1      # ajuste conforme necessidade (em km)
)
View(processed_data)
roads_shp_path <- "I:/Meu Drive/Doutorado/CAPÍTULO ÍNDICE/Shapefiles/Rodovias/Rodovias_fed_est_outros.shp"
roads_sf <- sf::st_read(roads_shp_path, quiet = TRUE)
if (sf::st_crs(roads_sf)$epsg != 4326) {
roads_sf <- sf::st_transform(roads_sf, crs = 4326)
}
ref_distancia <- 1.5  # em km, por exemplo
rti_res <- calculate_RTI(
occurrences = processed_data,
roads       = roads_sf,
ref_dist    = ref_distancia
)
View(rti_res)
head(result$RTI)
hfp_tif_path <- "I:/Meu Drive/Doutorado/CAPÍTULO ÍNDICE/hfp2017_brasil.tif"
footprint_raster <- raster::raster(hfp_tif_path)
if (raster::crs(footprint_raster) != "+proj=longlat +datum=WGS84 +no_defs") {
# Exemplo de reprojeção para WGS84:
footprint_raster <- raster::projectRaster(
footprint_raster,
crs = "+proj=longlat +datum=WGS84 +no_defs",
method = "bilinear"
)
}
divisor_hfti <- 50     # ajustar conforme a escala do raster
buffer_metros <- 1000  # 1.000 m (1 km) no buffer; ajuste conforme necessidade
hfti_res <- calculate_HFTI(
occurrences = rti_res$data,     # aqui passamos o objeto sf já com RTI_value
footprint   = footprint_raster,
divisor     = divisor_hfti,
buffer_m    = buffer_metros
)
combined_indices <- dplyr::left_join(
rti_res$RTI,     # data frame: species | RTI
hfti_res$HFTI,   # data frame: species | HFTI
by = "species"
)
result_personalizado <- list(
RTI            = rti_res$RTI,
HFTI           = hfti_res$HFTI,
indices        = combined_indices,
processed_data = hfti_res$data     # contém colunas RTI_value e HFTI_value
)
View(hfti_res)
View(rti_res)
brasil_shapefile <- "I:/Meu Drive/Doutorado/Shapefiles/Brasil/lim_pais_a.shp"
pasta_saida <- "I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/testes_saída/2"
generate_all_reports(
result         = result_personalizado,
area_shapefile = area_shp_path,
out_dir        = pasta_saida,
map_crs        = 4326,      # (opcional; 4326 = WGS84)
point_size     = 1.5,       # (opcional; tamanho dos pontos nos mapas)
density_fill   = "steelblue",  # (opcional; cor das densidades)
density_alpha  = 0.35       # (opcional; transparência das densidades)
)
generate_all_reports(
result         = result_personalizado,
area_shapefile = brasil_shapefile,
out_dir        = pasta_saida,
map_crs        = 4326,      # (opcional; 4326 = WGS84)
point_size     = 1.5,       # (opcional; tamanho dos pontos nos mapas)
density_fill   = "steelblue",  # (opcional; cor das densidades)
density_alpha  = 0.35       # (opcional; transparência das densidades)
)
roads_shp_path <- "I:/Meu Drive/Doutorado/TODAS AS RUAS DO BRASIL/rodovias_brasil/Rodovias_Brasil.shp"
roads_sf <- sf::st_read(roads_shp_path, quiet = TRUE)
if (sf::st_crs(roads_sf)$epsg != 4326) {
roads_sf <- sf::st_transform(roads_sf, crs = 4326)
}
ref_distancia <- 1.5  # em km, por exemplo
rti_res <- calculate_RTI(
occurrences = processed_data,
roads       = roads_sf,
ref_dist    = ref_distancia
)
combined_indices <- dplyr::left_join(
rti_res$RTI,     # data frame: species | RTI
hfti_res$HFTI,   # data frame: species | HFTI
by = "species"
)
View(rti_res)
View(rti_res)
occ_data <- read.csv("I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/valid_data_copaifera.csv")
# 0) Carregar pacotes
library(ecoTolerance)
# 1) Ler dados de ocorrência (CSV)
ocorrencias_path <- "I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/valid_data_copaifera.csv"
occ_data <- read.csv(ocorrencias_path, stringsAsFactors = FALSE)
# Caminho do shapefile de estradas personalizado
roads_shp_path <- "I:/Meu Drive/Doutorado/TODAS AS RUAS DO BRASIL/rodovias_brasil/Rodovias_Brasil.shp"
roads_sf <- sf::st_read(roads_shp_path, quiet = TRUE)
# Reprojetar para 4326 (se necessário)
if (sf::st_crs(roads_sf)$epsg != 4326) {
roads_sf <- sf::st_transform(roads_sf, crs = 4326)
}
return(roads_sf)
library(sf)
# Reprojetar para 4326 (se necessário)
if (sf::st_crs(roads_sf)$epsg != 4326) {
roads_sf <- sf::st_transform(roads_sf, crs = 4326)
}
return(roads_sf)
library(raster)
library(dplyr)
# 2.1) load_roads(): em vez de usar o shapefile interno do pacote,
#      leia o shapefile externo do usuário
load_roads <- function() {
# Caminho do shapefile de estradas personalizado
roads_shp_path <- "I:/Meu Drive/Doutorado/TODAS AS RUAS DO BRASIL/rodovias_brasil/Rodovias_Brasil.shp"
roads_sf <- sf::st_read(roads_shp_path, quiet = TRUE)
# Reprojetar para 4326 (se necessário)
if (sf::st_crs(roads_sf)$epsg != 4326) {
roads_sf <- sf::st_transform(roads_sf, crs = 4326)
}
return(roads_sf)
}
# 2.2) load_human_footprint(): em vez do raster interno,
#      leia o raster externo do usuário
load_human_footprint <- function() {
hfp_tif_path <- "I:/Meu Drive/Doutorado/CAPÍTULO ÍNDICE/hfp2017_brasil.tif"
footprint_raster <- raster::raster(hfp_tif_path)
# Se quiser reprojetar para 4326, faça aqui:
if (raster::crs(footprint_raster) != "+proj=longlat +datum=WGS84 +no_defs") {
footprint_raster <- raster::projectRaster(
footprint_raster,
crs = "+proj=longlat +datum=WGS84 +no_defs",
method = "bilinear"
)
}
return(footprint_raster)
}
# 3) Agora basta chamar compute_indices() normalmente:
result_bypass <- compute_indices(
data = occ_data,
remove_duplicates = TRUE,
buffer_km = 1,
ref_dist = 1.5,   # exemplo de ajuste
divisor = 50      # exemplo de ajuste
)
# 4) Ler o shapefile de área de estudo (fundo do mapa)
area_shp_path <- "I:/Meu Drive/Doutorado/Shapefiles/Brasil/lim_pais_a.shp"
# 5) Gerar todos os relatórios com generate_all_reports()
out_dir <- "I:/MeusDados/Relatorios_Patch"
generate_all_reports(
result         = result_bypass,
area_shapefile = area_shp_path,
out_dir        = out_dir
)
# 5) Gerar todos os relatórios com generate_all_reports()
out_dir <- "I:/Meu Drive/Doutorado/ocorrencia_exemplo_pacote/testes_saída/2"
generate_all_reports(
result         = result_bypass,
area_shapefile = area_shp_path,
out_dir        = out_dir
)
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
setwd("I:/Meu Drive/Doutorado/Pacote R")
library(devtools)
devtools::build(pkg = "ecoTolerance")
install.packages("usethis")
install.packages("usethis")
usethis::edit_r_environ()
Sys.getenv("GITHUB_PAT")
usethis::use_git()
# Substitua abaixo pelo seu nome completo e pelo seu e-mail do GitHub
usethis::use_git_config(
user.name  = "diegomirandaeco",
user.email = "diego.miranda@ufba.br"
)
usethis::use_git()
usethis::use_git_remote(
name   = "origin",
url    = "https://github.com/diegomirandaeco/ecoTolerance.git",
remote = TRUE
)
usethis::use_git_remote(
name   = "ecoTolerance",
url    = "https://github.com/diegomirandaeco/ecoTolerance.git",
remote = TRUE
)
usethis::use_git_remote(
"https://github.com/diegomirandaeco/ecoTolerance.git",
name = "origin"
)
usethis::use_git_remote(
"diegomirandaeco/ecoTolerance",
name = "origin"
)
usethis::git_rm_remote("origin")
usethis::use_git_remote(
"diegomirandaeco/ecoTolerance",
name      = "origin",
overwrite = TRUE
)
usethis::git_push("origin", "main")
library(usethis)
usethis::edit_r_environ()
Sys.getenv("GITHUB_PAT")
usethis::use_git_config(
user.name  = "Diego F. Miranda",
user.email = "diego.miranda@ufba.br"
)
setwd("I:/Meu Drive/Doutorado/Pacote R/ecoTolerance")
usethis::use_git()
usethis::use_git()
usethis::use_git_config(
user.name  = "diegomirandaeco",
user.email = "diego.miranda@ufba.br"
)
setwd("I:/Meu Drive/Doutorado/Pacote R/ecoTolerance")
usethis::use_git()
